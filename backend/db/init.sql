-- Create extension for UUID generation
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Set timezone to UTC
SET TIMEZONE = 'UTC';

-- Create tables

-- Store locations
CREATE TABLE IF NOT EXISTS stores (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    location VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Product categories
CREATE TABLE IF NOT EXISTS categories (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Products
CREATE TABLE IF NOT EXISTS products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    category_id INTEGER REFERENCES categories(id),
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Product inventory items (specific instances of products with expiration dates)
CREATE TABLE IF NOT EXISTS inventory_items (
    id SERIAL PRIMARY KEY,
    product_id INTEGER NOT NULL REFERENCES products(id),
    store_id INTEGER NOT NULL REFERENCES stores(id),
    quantity INTEGER NOT NULL DEFAULT 0,
    manufacturing_date DATE,
    expiration_date DATE NOT NULL,
    purchase_date DATE,
    batch_number VARCHAR(100),
    unit_price DECIMAL(10, 2),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Product transfers between stores
CREATE TABLE IF NOT EXISTS transfers (
    id SERIAL PRIMARY KEY,
    source_store_id INTEGER NOT NULL REFERENCES stores(id),
    destination_store_id INTEGER NOT NULL REFERENCES stores(id),
    inventory_item_id INTEGER NOT NULL REFERENCES inventory_items(id),
    quantity INTEGER NOT NULL,
    transfer_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50) DEFAULT 'pending', -- pending, completed, cancelled
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Promotions for products close to expiration
CREATE TABLE IF NOT EXISTS promotions (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    discount_percentage DECIMAL(5, 2) NOT NULL,
    start_date TIMESTAMP WITH TIME ZONE NOT NULL,
    end_date TIMESTAMP WITH TIME ZONE NOT NULL,
    store_id INTEGER REFERENCES stores(id),
    category_id INTEGER REFERENCES categories(id),
    active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Connection between promotions and specific inventory items
CREATE TABLE IF NOT EXISTS promotion_items (
    id SERIAL PRIMARY KEY,
    promotion_id INTEGER NOT NULL REFERENCES promotions(id),
    inventory_item_id INTEGER NOT NULL REFERENCES inventory_items(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Recommendations generated by the system
CREATE TABLE IF NOT EXISTS recommendations (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    recommendation_type VARCHAR(50) NOT NULL, -- transfer, promotion, etc.
    impact VARCHAR(20) DEFAULT 'medium', -- high, medium, low
    is_useful BOOLEAN DEFAULT NULL, -- user feedback
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    acted_upon BOOLEAN DEFAULT FALSE,
    acted_upon_at TIMESTAMP WITH TIME ZONE
);

-- Recommendation details for inventory items
CREATE TABLE IF NOT EXISTS recommendation_items (
    id SERIAL PRIMARY KEY,
    recommendation_id INTEGER NOT NULL REFERENCES recommendations(id),
    inventory_item_id INTEGER NOT NULL REFERENCES inventory_items(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Statistics for dashboard
CREATE TABLE IF NOT EXISTS dashboard_stats (
    id SERIAL PRIMARY KEY,
    date DATE UNIQUE NOT NULL,
    total_savings DECIMAL(12, 2) DEFAULT 0,
    active_promotions INTEGER DEFAULT 0,
    transferred_products INTEGER DEFAULT 0,
    products_on_alert INTEGER DEFAULT 0,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Sample data insertion

-- Insert store locations
INSERT INTO stores (name, location) VALUES
    ('Vila Mariana', 'São Paulo, SP'),
    ('Pinheiros', 'São Paulo, SP'),
    ('Jardins', 'São Paulo, SP'),
    ('Moema', 'São Paulo, SP'), 
    ('Santana', 'São Paulo, SP'),
    ('Tatuapé', 'São Paulo, SP'),
    ('Ipiranga', 'São Paulo, SP'),
    ('Mooca', 'São Paulo, SP')
ON CONFLICT DO NOTHING;

-- Insert product categories
INSERT INTO categories (name, description) VALUES
    ('Pintura', 'Produtos relacionados a pintura como tintas, vernizes e acessórios'),
    ('Jardim', 'Produtos para jardinagem, plantas e flores')
ON CONFLICT DO NOTHING;

-- Insert products
INSERT INTO products (name, category_id, description) VALUES
    ('Tinta Acrílica Fosca', 1, 'Tinta acrílica fosca de alta qualidade'),
    ('Verniz Marítimo', 1, 'Verniz protetor resistente à água'),
    ('Buquê Primavera', 2, 'Arranjo floral com flores da estação'),
    ('Suculenta', 2, 'Planta suculenta pequena para decoração'),
    ('Cola de contato', 1, 'Cola de contato para diversos materiais'),
    ('Fertilizante Natural', 2, 'Fertilizante orgânico para plantas'),
    ('Impermeabilizante', 1, 'Impermeabilizante para superfícies'),
    ('Massa Corrida', 1, 'Massa para preparação de paredes'),
    ('Orquídea Phalaenopsis', 2, 'Orquídea decorativa'),
    ('Selador Acrílico', 1, 'Selador para preparação de superfícies')
ON CONFLICT DO NOTHING;

-- Insert inventory items with expiration dates
INSERT INTO inventory_items (product_id, store_id, quantity, expiration_date, unit_price) VALUES
    (1, 1, 45, CURRENT_DATE + INTERVAL '15 days', 79.90),
    (2, 2, 23, CURRENT_DATE + INTERVAL '15 days', 109.90),
    (3, 3, 18, CURRENT_DATE + INTERVAL '7 days', 45.90),
    (4, 3, 20, CURRENT_DATE + INTERVAL '7 days', 29.90),
    (5, 1, 7, CURRENT_DATE + INTERVAL '15 days', 19.90),
    (6, 4, 15, CURRENT_DATE + INTERVAL '12 days', 34.90),
    (7, 5, 8, CURRENT_DATE + INTERVAL '10 days', 89.90),
    (8, 6, 12, CURRENT_DATE + INTERVAL '14 days', 49.90),
    (9, 7, 10, CURRENT_DATE + INTERVAL '5 days', 69.90),
    (10, 8, 18, CURRENT_DATE + INTERVAL '8 days', 29.90)
ON CONFLICT DO NOTHING;

-- Insert some promotions
INSERT INTO promotions (name, description, discount_percentage, start_date, end_date, store_id, category_id, active) VALUES
    ('Promoção Tintas', 'Desconto em produtos de pintura próximos ao vencimento', 20.00, CURRENT_DATE, CURRENT_DATE + INTERVAL '7 days', 1, 1, TRUE),
    ('Desconto Jardim', 'Desconto especial em plantas e flores', 30.00, CURRENT_DATE, CURRENT_DATE + INTERVAL '5 days', 2, 2, TRUE)
ON CONFLICT DO NOTHING;

-- Apply promotions to specific items
INSERT INTO promotion_items (promotion_id, inventory_item_id) VALUES
    (1, 1),
    (1, 5),
    (2, 9)
ON CONFLICT DO NOTHING;

-- Insert historical transfers
INSERT INTO transfers (source_store_id, destination_store_id, inventory_item_id, quantity, status) VALUES
    (1, 2, 1, 5, 'completed'),
    (2, 3, 2, 3, 'completed'),
    (3, 1, 3, 2, 'completed')
ON CONFLICT DO NOTHING;

-- Insert sample recommendations
INSERT INTO recommendations (title, description, recommendation_type, impact, is_useful) VALUES
    ('Realocação de Estoque', 'Transferir produtos da seção Jardim para loja com maior demanda histórica', 'transfer', 'high', NULL),
    ('Promoção Relâmpago', 'Iniciar promoção para produtos de pintura com menos de 15 dias para vencimento', 'promotion', 'medium', NULL),
    ('Reabastecimento Estratégico', 'Reduzir compra de produtos sazonais com baixa rotatividade no próximo trimestre', 'procurement', 'medium', NULL),
    ('Exposição Especial', 'Criar exposição destacada para itens de jardinagem com vencimento em 20 dias', 'display', 'low', NULL)
ON CONFLICT DO NOTHING;

-- Connect recommendations to specific inventory items
INSERT INTO recommendation_items (recommendation_id, inventory_item_id) VALUES
    (1, 3),
    (1, 4),
    (2, 1),
    (2, 2),
    (3, 6),
    (4, 9)
ON CONFLICT DO NOTHING;

-- Insert dashboard stats
INSERT INTO dashboard_stats (date, total_savings, active_promotions, transferred_products, products_on_alert) VALUES
    (CURRENT_DATE, 33450.00, 12, 20, 27)
ON CONFLICT DO NOTHING;

-- Create views for easier querying

-- View for products with days until expiry
CREATE OR REPLACE VIEW vw_products_expiration AS
SELECT 
    i.id as inventory_id,
    p.id as product_id,
    p.name as product_name,
    c.name as category,
    s.name as store,
    i.quantity,
    i.expiration_date,
    i.unit_price,
    (i.expiration_date - CURRENT_DATE) as days_until_expiry
FROM 
    inventory_items i
    JOIN products p ON i.product_id = p.id
    JOIN categories c ON p.category_id = c.id
    JOIN stores s ON i.store_id = s.id;

-- View for products on alert (close to expiration)
CREATE OR REPLACE VIEW vw_products_on_alert AS
SELECT 
    *,
    CASE
        WHEN days_until_expiry <= 7 THEN 'high'
        WHEN days_until_expiry <= 15 THEN 'medium'
        ELSE 'low'
    END as alert_level,
    CASE
        WHEN days_until_expiry <= 7 THEN 'Aplicar desconto de 30% ou transferir para loja com maior demanda'
        WHEN days_until_expiry <= 15 THEN 'Monitorar e considerar promoção'
        ELSE 'Nenhuma ação necessária'
    END as recommended_action
FROM 
    vw_products_expiration
WHERE 
    days_until_expiry <= 15;

-- Function to update dashboard stats
CREATE OR REPLACE FUNCTION update_dashboard_stats()
RETURNS TRIGGER AS $$
BEGIN
    -- Insert or update dashboard stats for today
    INSERT INTO dashboard_stats (date, total_savings, active_promotions, transferred_products, products_on_alert)
    VALUES (
        CURRENT_DATE,
        (SELECT COALESCE(SUM(i.quantity * i.unit_price * (p.discount_percentage / 100)), 0)
         FROM promotion_items pi
         JOIN inventory_items i ON pi.inventory_item_id = i.id
         JOIN promotions p ON pi.promotion_id = p.id
         WHERE p.active = TRUE),
        (SELECT COUNT(*) FROM promotions WHERE active = TRUE),
        (SELECT COUNT(*) FROM transfers WHERE status = 'completed'),
        (SELECT COUNT(*) FROM vw_products_on_alert)
    )
    ON CONFLICT (date) DO UPDATE
    SET 
        total_savings = EXCLUDED.total_savings,
        active_promotions = EXCLUDED.active_promotions,
        transferred_products = EXCLUDED.transferred_products,
        products_on_alert = EXCLUDED.products_on_alert,
        updated_at = CURRENT_TIMESTAMP;
    
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Create triggers to update dashboard stats
CREATE TRIGGER update_dashboard_on_promotion
AFTER INSERT OR UPDATE OR DELETE ON promotions
FOR EACH STATEMENT EXECUTE FUNCTION update_dashboard_stats();

CREATE TRIGGER update_dashboard_on_promotion_items
AFTER INSERT OR UPDATE OR DELETE ON promotion_items
FOR EACH STATEMENT EXECUTE FUNCTION update_dashboard_stats();

CREATE TRIGGER update_dashboard_on_transfer
AFTER INSERT OR UPDATE OR DELETE ON transfers
FOR EACH STATEMENT EXECUTE FUNCTION update_dashboard_stats();

CREATE TRIGGER update_dashboard_on_inventory
AFTER INSERT OR UPDATE OR DELETE ON inventory_items
FOR EACH STATEMENT EXECUTE FUNCTION update_dashboard_stats();

-- Initial initialization of dashboard stats (using a proper INSERT statement instead of calling the trigger function)
INSERT INTO dashboard_stats (date, total_savings, active_promotions, transferred_products, products_on_alert)
VALUES (
    CURRENT_DATE,
    (SELECT COALESCE(SUM(i.quantity * i.unit_price * (p.discount_percentage / 100)), 0)
     FROM promotion_items pi
     JOIN inventory_items i ON pi.inventory_item_id = i.id
     JOIN promotions p ON pi.promotion_id = p.id
     WHERE p.active = TRUE),
    (SELECT COUNT(*) FROM promotions WHERE active = TRUE),
    (SELECT COUNT(*) FROM transfers WHERE status = 'completed'),
    (SELECT COUNT(*) FROM vw_products_on_alert)
)
ON CONFLICT (date) DO UPDATE
SET 
    total_savings = EXCLUDED.total_savings,
    active_promotions = EXCLUDED.active_promotions,
    transferred_products = EXCLUDED.transferred_products,
    products_on_alert = EXCLUDED.products_on_alert,
    updated_at = CURRENT_TIMESTAMP; 